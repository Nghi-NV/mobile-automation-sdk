#!/bin/bash

# Load common utilities
source "$(dirname "$0")/../common/utils.sh"

# Initialize environment
load_env
validate_env

# Constants
ANALYTICS_DIR="$PROJECT_PATH/analytics"
EVENTS_FILE="$ANALYTICS_DIR/events.json"
FIREBASE_CONFIG="$PROJECT_PATH/firebase.json"

# Function to setup analytics
setup_analytics() {
    log_info "Setting up analytics..."
    
    mkdir -p "$ANALYTICS_DIR"
    
    # Create events configuration if not exists
    if [ ! -f "$EVENTS_FILE" ]; then
        cat > "$EVENTS_FILE" <<EOF
{
  "events": {
    "app_open": {
      "parameters": []
    },
    "user_login": {
      "parameters": ["method", "success"]
    },
    "screen_view": {
      "parameters": ["screen_name", "screen_class"]
    },
    "button_click": {
      "parameters": ["button_id", "screen_name"]
    }
  }
}
EOF
    fi
    
    # iOS setup
    if [ "$1" = "ios" ] || [ "$1" = "all" ]; then
        # Setup Firebase Analytics
        if ! grep -q "pod 'Firebase/Analytics'" "$PROJECT_PATH/ios/Podfile"; then
            echo "pod 'Firebase/Analytics'" >> "$PROJECT_PATH/ios/Podfile"
            cd "$PROJECT_PATH/ios" && pod install
        fi
    fi
    
    # Android setup
    if [ "$1" = "android" ] || [ "$1" = "all" ]; then
        # Setup Firebase Analytics
        if ! grep -q "com.google.firebase:firebase-analytics" "$PROJECT_PATH/android/app/build.gradle"; then
            echo "implementation 'com.google.firebase:firebase-analytics'" >> "$PROJECT_PATH/android/app/build.gradle"
        fi
    fi
}

# Function to validate analytics events
validate_events() {
    log_info "Validating analytics events..."
    
    local source_dir="$PROJECT_PATH/lib"
    local report_file="$ANALYTICS_DIR/validation_report.txt"
    
    echo "Analytics Events Validation Report" > "$report_file"
    echo "===============================" >> "$report_file"
    echo "Generated: $(date)" >> "$report_file"
    echo "" >> "$report_file"
    
    # Load defined events
    local events=$(jq -r '.events | keys[]' "$EVENTS_FILE")
    
    # Check each event usage
    for event in $events; do
        echo "Checking event: $event" >> "$report_file"
        
        # Search for event usage in source code
        local usage=$(grep -r "logEvent.*$event" "$source_dir" || echo "")
        
        if [ -z "$usage" ]; then
            echo "- WARNING: Event not used in code" >> "$report_file"
        else
            echo "- Found usages:" >> "$report_file"
            echo "$usage" | sed 's/^/  /' >> "$report_file"
        fi
        
        # Validate parameters
        local params=$(jq -r ".events.\"$event\".parameters[]" "$EVENTS_FILE" 2>/dev/null)
        if [ ! -z "$params" ]; then
            echo "- Required parameters:" >> "$report_file"
            echo "$params" | sed 's/^/  /' >> "$report_file"
            
            # Check parameter usage
            for param in $params; do
                if ! echo "$usage" | grep -q "$param"; then
                    echo "  WARNING: Parameter '$param' not found in usage" >> "$report_file"
                fi
            done
        fi
        
        echo "" >> "$report_file"
    done
    
    log_success "Validation report generated: $report_file"
}

# Function to generate analytics constants
generate_constants() {
    log_info "Generating analytics constants..."
    
    local output_file="$PROJECT_PATH/lib/generated/analytics.dart"
    mkdir -p "$(dirname "$output_file")"
    
    # Create header
    cat > "$output_file" <<EOF
// Generated file - do not modify manually
// Generated by scripts/monitoring/analytics.sh

class Analytics {
  static const String APP_OPEN = 'app_open';
  static const String USER_LOGIN = 'user_login';
  static const String SCREEN_VIEW = 'screen_view';
  static const String BUTTON_CLICK = 'button_click';
  
  // Parameters
  static const String PARAM_METHOD = 'method';
  static const String PARAM_SUCCESS = 'success';
  static const String PARAM_SCREEN_NAME = 'screen_name';
  static const String PARAM_SCREEN_CLASS = 'screen_class';
  static const String PARAM_BUTTON_ID = 'button_id';
}
EOF
    
    log_success "Generated: $output_file"
}

# Function to export analytics data
export_analytics() {
    log_info "Exporting analytics data..."
    
    local start_date=$1
    local end_date=$2
    local output_dir="$ANALYTICS_DIR/exports/$(date +%Y%m%d)"
    
    mkdir -p "$output_dir"
    
    # Export from Firebase Analytics
    if [ -f "$FIREBASE_CONFIG" ]; then
        firebase analytics:export "$output_dir/firebase_analytics.csv" \
            --start-date "$start_date" \
            --end-date "$end_date"
    fi
    
    log_success "Analytics data exported to: $output_dir"
}

# Main function
main() {
    if [ $# -lt 1 ]; then
        log_error "Usage: $0 <command> [platform|start_date end_date]"
        log_error "Commands: setup, validate, generate, export"
        log_error "Platforms: ios, android, all"
        exit 1
    fi
    
    local command=$1
    shift
    
    case "$command" in
        "setup")
            if [ $# -lt 1 ]; then
                log_error "Platform required for setup"
                exit 1
            fi
            setup_analytics "$1"
            ;;
        "validate")
            validate_events
            ;;
        "generate")
            generate_constants
            ;;
        "export")
            if [ $# -lt 2 ]; then
                log_error "Start date and end date required for export"
                exit 1
            fi
            export_analytics "$1" "$2"
            ;;
        *)
            log_error "Invalid command: $command"
            exit 1
            ;;
    esac
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 